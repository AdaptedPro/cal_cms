                <article id="dashboard_maincontent">
                	<h2>Hello <%= @usr.first_name %></h2>
                	<section>
						<fieldset>
							<legend>Locations</legend>
							<div id="map-legend">
								<select id="user_locations_legend">
									<% @user_locations.each do |location_title| %>
									<option><%= location_title.item_title %></option>
									<% end %>    					
								</select>
							</div>
							<div id="map-canvas"></div>
						</fieldset>	                		
                	</section>
                	<section>
						<fieldset>
							<legend>Currently</legend>
							<ul class="item_count">
								<li><strong><%= @contacts_count %></strong> - Contacts</li>				
								<li><strong><%= @usr_events_count %></strong> - Events</li>
								<li><strong><%= @location_count %></strong> - Locations</li>
							</ul>
						</fieldset>	                		
                	</section>
                    <section>
						<fieldset>
							<legend>Pending</legend>
						</fieldset>	                    	
                	</section>            	                	
                </article>			

<script type="text/javascript">
function initialize() {
	var mapOptions = {
	  zoom: 8,
	  disableDefaultUI: true,      
	  mapTypeId: google.maps.MapTypeId.ROADMAP
	};
	var map = new google.maps.Map(document.getElementById("map-canvas"),mapOptions);

	 if(navigator.geolocation) {
	    navigator.geolocation.getCurrentPosition(function(position) {
	      var pos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);

	      	map.setCenter(pos);

			var markers = [];
			var iterator = 0;
			var neighborhoods = [
  
			];

			drop();
			function drop() {
				for (var i = 0; i < neighborhoods.length; i++) {
				  //setTimeout(function() {
				    addMarker();
				  //}, i * 300);
				}
			}

			function addMarker() {
				markers.push(new google.maps.Marker({
				  position: neighborhoods[iterator],
				  map: map,
				  draggable: false
				  //animation: google.maps.Animation.BOUNCE
				}));
				iterator++;
			} 

	    }, function() {
	      handleNoGeolocation(true);
	    });
	  } else {		  	
	    // Browser doesn't support Geolocation
	    handleNoGeolocation(false);
	  }
}

function handleNoGeolocation(errorFlag) {
	if (errorFlag) {
		var content = 'Error: The Geolocation service failed.';
	} else {
		var content = 'Error: Your browser doesn\'t support geolocation.';
	}

	var options = {
		map: map,
		position: new google.maps.LatLng(60, 105),
		content: content
	};

	var infowindow = new google.maps.InfoWindow(options);
	map.setCenter(options.position);
}    
 
google.maps.event.addDomListener(window, 'load', initialize);

$("#user_locations_legend").select2({
    placeholder: "Search for a movie",
    minimumInputLength: 3,
    ajax: {
        url: "http://api.rottentomatoes.com/api/public/v1.0/movies.json",
        dataType: 'jsonp',
        quietMillis: 100,
        data: function (term, page) { // page is the one-based page number tracked by Select2
            return {
                q: term, //search term
                page_limit: 10, // page size
                page: page, // page number
                apikey: "ju6z9mjyajq2djue3gbvv26t" // please do not use so this example keeps working
            };
        },
        results: function (data, page) {
            var more = (page * 10) < data.total; // whether or not there are more results available
 
            // notice we return the value of more so Select2 knows if more results can be loaded
            return {results: data.movies, more: more};
        }
    },
    formatResult: movieFormatResult, // omitted for brevity, see the source of this page
    formatSelection: movieFormatSelection, // omitted for brevity, see the source of this page
    dropdownCssClass: "bigdrop", // apply css that makes the dropdown taller
    escapeMarkup: function (m) { return m; } // we do not want to escape markup since we are displaying html in results
});
</script>		